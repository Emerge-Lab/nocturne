[tool.poetry]
name = "nocturne"
version = "0.0.1"
description = "A data-driven, fast driving simulator for multi-agent coordination under partial observability."
authors = [
  "Nathan Lichtl√© <nathan.lichtle@gmail.com>",
  "Eugene Vinitsky <vinitsky.eugene@gmail.com>",
  "Xiaomeng Yang <bit.yangxm@gmail.com>"
]
maintainers = [
  "Daphne Cornelisse <cornelisse.daphne@nyu.edu>",
  "Eugene Vinitsky <vinitsky.eugene@gmail.com>"
]
homepage = "https://github.com/Emerge-Lab/nocturne"
repository = "https://github.com/Emerge-Lab/nocturne"
documentation = "https://nocturne.readthedocs.io/"
license = "MIT"
readme = "README.md"
keywords = ["Driving", "Simulation", "Autonomous Vehicles", "Waymo", "Reinforcement Learning"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Programming Language :: C++",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: C++",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Emerge-Lab/nocturne/issues"
"Discussions" = "https://github.com/Emerge-Lab/nocturne/discussions"
"Changelog" = "https://nocturne.readthedocs.io/en/latest/changelog.html"
"Chat" = "https://gitter.im/nocturne/Lobby"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
numpy = "^1.26.0"
torch = "^2.0.1"
gym = "^0.26.2"
pybind11 = "^2.11.1"
python-box = "^7.1.1"
gymnasium = "^0.29.1"
moviepy = "^1.0.3"
imageio = "^2.31.5"
pyvirtualdisplay = "^3.0"
typer = "^0.9.0"
stable-baselines3 = "^2.1.0"
torchvision = "^0.16.2"
torchaudio = "^2.1.2"

[tool.poetry.group.research.dependencies]
ipykernel = "^6.25.2"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
pandas = "^2.1.1"
wandb = "^0.15.12"
tensorboard = "^2.14.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.4.0"
tomli = "^2.0.1"
ruff = "^0.1.11"

[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv"
]
# Set the maximum line length to 120 characters.
line-length = 120
# Set indentation width to 4 spaces.
indent-width = 4
# Assume Python 3.10
target-version = "py310"
# Include all notebooks
extend-include = ["*.ipynb"]
# Errors to ignore
extend-ignore = [
  "COM812",  # Allow commas after multiline items
  "G004",  # Allow f-strings in logging
  "PLR0912",  # Allow too-many branches
  "PLR0913",  # Allow too-many-arguments
  "PLR0915",  # Allow too-many-statements
  "S101"  # Allow asserts
]

[tool.ruff.lint]
select = [
  "F",  # Pyflakes
  "E",  # pydocstyle - error
  "W",  # pycodestyle - warning
  "I",  # isort
  "N",  # pep8-naming
  "D",  # pydocstyle
  "S",  # flake8-bandit
  "BLE",  # flake8-blind-except
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "C4",  # flake8-comprehensions
  "EXE",  # flake8-executable
  "G",  # flake8-logging-format
  "T20",  # flake8-print
  "PT",  # flake8-pytest-style
  "Q",  # flake8-quotes
  "RSE",  # flake8-raise
  "SLOT",  # flake8-slots
  "SIM",  # flake8-simplify
  "TCH",  # flake8-type-checking-hooks
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "FIX",  # flake8-fixme
  "PL",  # Pylint
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "RUF",  # Ruff-specific rules
  "COM"  # flake8-commas
]
# Exclude notebooks from linting.
exclude = ["*.ipynb"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.setuptools_scm]
write_to = "nocturne/_version.py"

[build-system]
requires = ["poetry-core", "pybind11>=2.11.1", "setuptools>=68.2.2"]
build-backend = "poetry.core.masonry.api"
